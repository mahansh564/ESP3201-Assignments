# -*- coding: utf-8 -*-
"""ESP3201 MA 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bUkzOIyxE99NFDid9SaambbGLdAAV-Te
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_squared_error

df = pd.read_csv('/content/drive/MyDrive/KF_Measurement.csv', names = ['time', 'x', 'y', 'x_truth', 'y_truth'])
df = df.reset_index()
df = df.drop('y_truth', axis = 'columns')
df = df.rename(columns={"index": "time", "time": "x", "x" : 'y', "y" : 'x_truth', "x_truth" : 'y_truth'})
df

plt.plot(df['x_truth'], df['y_truth'])
plt.show()

df.iloc[0][3:5].values

# Constants and Variables

x_i = 0 # initial x
y_i = 0 # inital y
t = 1 # time step
std = 10 # standard deviation of measurement
var = std**2 # variance of measurement
v_max = 250 # max velocity of plane
Q_o = 0.1 # process noise covariance

# initial state
x = np.array([df.iloc[0][3:5].values[0], df.iloc[0][3:5].values[1], 0, 0])

# state transition matrix
A = np.array([[1, 0, t, 0],
              [0, 1, 0, t],
              [0, 0, 1, 0],
              [0, 0, 0, 1]])

#
P = np.array([[var, 0, 0, 0],
              [0, var, 0, 0],
              [0, 0, (v_max/3)**2, 0],
              [0, 0, 0, (v_max/3)**2]])

# process noise covariance
Q = Q_o * np.eye(4)

# measurement noise covariance
R = np.array([[var, 0],
              [0, var]])

# measurement matrix
H = np.array([[1, 0, 0, 0],
              [0, 1, 0, 0]])

x_estimate = [np.array([x_i, y_i])]

for dt in range(len(df)):
  # x(k) = A*x_k-1 + B*u(k)
  # Here u(k) = 0
  current_x = A @ x

  # Find Kalman Gain K:
  # 1. find P(k+1|k) = A * P(k|k)AT + Q*R
  current_P = A @ P @ A.T + Q

  # 2. find K = (P(k+1|k) * HT)/(H*P(k+1|k)*HT + R)
  numerator = (current_P @ H.T)
  denominator = (H @ current_P @ H.T + R)
  K = numerator @ np.linalg.inv(denominator)

  # 3. find x(k+1|k) = x(k+1|k-1) + K*(z(k) - H*x(k+1|k-1))
  z = df.iloc[dt][1:3].values # get x and y from dataset
  new_x = current_x + K @ (z - H @ current_x)

  # Update P = (I - K*H)*P_k-1
  P = (np.eye(4) - K @ H) @ current_P

  x_estimate.append(x)

  x = new_x

x_predict = [pt[0] for pt in x_estimate]
y_predict = [pt[1] for pt in x_estimate]

x_mse = mean_squared_error(df['x_truth'], x_predict[1:])
y_mse = mean_squared_error(df['y_truth'], y_predict[1:])

print(f'X MSE: {x_mse}')
print(f'Y MSE: {y_mse}')

plt.plot(df['x_truth'], df['y_truth'], marker='o')
plt.plot(x_predict, y_predict, marker='o')
plt.legend(['Truth', 'Prediction'])
plt.show()

